package com.demo.takeoutapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.demo.takeoutapp.data.TakeUserinfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAKE_USERINFO".
*/
public class TakeUserinfoDao extends AbstractDao<TakeUserinfo, Long> {

    public static final String TABLENAME = "TAKE_USERINFO";

    /**
     * Properties of entity TakeUserinfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Username = new Property(0, String.class, "username", false, "USERNAME");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Onlyid = new Property(3, Long.class, "onlyid", true, "_id");
        public final static Property Id = new Property(4, Integer.class, "id", false, "ID");
        public final static Property Portrait = new Property(5, String.class, "portrait", false, "PORTRAIT");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(7, String.class, "birthday", false, "BIRTHDAY");
    }


    public TakeUserinfoDao(DaoConfig config) {
        super(config);
    }
    
    public TakeUserinfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAKE_USERINFO\" (" + //
                "\"USERNAME\" TEXT," + // 0: username
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"PASSWORD\" TEXT," + // 2: password
                "\"_id\" INTEGER PRIMARY KEY ," + // 3: onlyid
                "\"ID\" INTEGER," + // 4: id
                "\"PORTRAIT\" TEXT," + // 5: portrait
                "\"SEX\" TEXT," + // 6: sex
                "\"BIRTHDAY\" TEXT);"); // 7: birthday
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAKE_USERINFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TakeUserinfo entity) {
        stmt.clearBindings();
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(1, username);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        Long onlyid = entity.getOnlyid();
        if (onlyid != null) {
            stmt.bindLong(4, onlyid);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(6, portrait);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TakeUserinfo entity) {
        stmt.clearBindings();
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(1, username);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        Long onlyid = entity.getOnlyid();
        if (onlyid != null) {
            stmt.bindLong(4, onlyid);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(6, portrait);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public TakeUserinfo readEntity(Cursor cursor, int offset) {
        TakeUserinfo entity = new TakeUserinfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // username
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // onlyid
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // portrait
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // birthday
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TakeUserinfo entity, int offset) {
        entity.setUsername(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOnlyid(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPortrait(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TakeUserinfo entity, long rowId) {
        entity.setOnlyid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TakeUserinfo entity) {
        if(entity != null) {
            return entity.getOnlyid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TakeUserinfo entity) {
        return entity.getOnlyid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
